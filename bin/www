#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('uno-project:server');
var http = require('http');
var socketAPI = require('../socketAPI');
const sessionStore     = require('../app');
const cookieParser     = require('cookie-parser')
const passportSocketIo = require('passport.socketio');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

console.log("before authorization");
/* socketio config */
socketAPI.io.use(passportSocketIo.authorize({
     cookieParser:   cookieParser,
     key:            'connect.sid',
     secret:         process.env.SESSION_SECRET,
     store:          sessionStore,
     fail:           onAuthorizeFail,
     success:        onAuthorizeSuccess
}));
console.log("after authorization");

function onAuthorizeFail(data, message, error, accept){
  console.log('FAILED TO AUTHORIZE');
  console.log(message);
  // error indicates whether the fail is due to an error or just a unauthorized client
  if(error)  throw new Error(message);
  // send the (not-fatal) error-message to the client and deny the connection
  return accept(new Error(message));
}

function onAuthorizeSuccess(data, accept) {
  console.log("Successful IO connection");
  // accept connection
  accept();

  // reject connection (for whatever reason)
  //accept(new Error('optional reason'));
}

/* attach socketio */
socketAPI.io.attach(server);
console.log("attached socketio to express");

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
